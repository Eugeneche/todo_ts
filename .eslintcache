[{"D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\reportWebVitals.ts":"1","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\App.tsx":"2","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\components\\TaskItem\\TaskItem.tsx":"3","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\components\\TaskForm\\TaskForm.tsx":"4","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\components\\CreatingModal\\CreatingModal.tsx":"5","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\components\\Board\\Board.tsx":"6","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\api\\api.tsx":"7","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\index.js":"8","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\redux\\store.ts":"9","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\hooks\\hooks.ts":"10","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\redux\\todosSlice.ts":"11","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\redux\\initSlice.ts":"12"},{"size":425,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":622,"mtime":1616925487129,"results":"15","hashOfConfig":"14"},{"size":3313,"mtime":1616802752565,"results":"16","hashOfConfig":"14"},{"size":719,"mtime":1613321879879,"results":"17","hashOfConfig":"14"},{"size":1806,"mtime":1616497348519,"results":"18","hashOfConfig":"14"},{"size":1372,"mtime":1616374211203,"results":"19","hashOfConfig":"14"},{"size":1785,"mtime":1617217222072,"results":"20","hashOfConfig":"14"},{"size":613,"mtime":1614522980457,"results":"21","hashOfConfig":"14"},{"size":365,"mtime":1616217348241,"results":"22","hashOfConfig":"14"},{"size":275,"mtime":1614527271544,"results":"23","hashOfConfig":"14"},{"size":3385,"mtime":1616942589053,"results":"24","hashOfConfig":"14"},{"size":1132,"mtime":1616302066234,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"narbcv",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\reportWebVitals.ts",[],["54","55"],"D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\App.tsx",[],"D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\components\\TaskItem\\TaskItem.tsx",[],"D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\components\\TaskForm\\TaskForm.tsx",[],["56","57"],"D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\components\\CreatingModal\\CreatingModal.tsx",[],"D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\components\\Board\\Board.tsx",[],"D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\api\\api.tsx",[],"D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\index.js",[],["58","59"],"D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\redux\\store.ts",[],"D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\hooks\\hooks.ts",[],"D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\redux\\todosSlice.ts",["60","61"],"import { createSlice, createAsyncThunk, current } from '@reduxjs/toolkit'\r\nimport { todosAPI } from '../api/api'\r\n\r\n\r\nexport interface Todo {\r\n  id?: string\r\n  created?: string\r\n  updated?: string\r\n  text: string\r\n  isCompleted: boolean\r\n  urgency: number\r\n}\r\n\r\n/* interface Response {\r\n  \"status\": number,\r\n  \"todo\": {\r\n    \"id\": string,\r\n    \"created\": string,\r\n    \"updated\": string,\r\n    \"text\": string,\r\n    \"isCompleted\": boolean,\r\n    \"urgency\": number\r\n  }\r\n} */\r\n\r\ninterface FetchTodosError {\r\n  status: string\r\n  message: string;\r\n}\r\n\r\nlet initialState = [] as Array<Todo> \r\n\r\nexport const fetchNewTodo = createAsyncThunk<\r\n  Todo, \r\n  Todo, \r\n    { \r\n      rejectValue: FetchTodosError \r\n    }\r\n  >('todos/fetchNewTodo', async (todoUserParams, { rejectWithValue }) => {\r\n    try {\r\n      const { text, isCompleted, urgency }: Todo = todoUserParams\r\n      const response = await todosAPI.createTodo(text, isCompleted, urgency)\r\n      return response.data.todo     \r\n    } catch (err) {\r\n/*       let error: FetchTodosError = err // cast the error for access\r\n      if (error.status === \"ERROR\") {\r\n        throw err */\r\n      }\r\n\r\n\r\n/*     if (response.status !== 201) {\r\n      alert(\"Thunk: Něco se pokazilo, ale můžete to zkusit znovu.\" )\r\n      return thunkAPI.rejectWithValue({ \r\n        message: \"Thunk: Něco se pokazilo, ale můžete to zkusit znovu.\"       \r\n      })  \r\n    }  */\r\n/*     .then(function (response: any) {\r\n      console.log(response);\r\n    })\r\n    .catch(function (error: any) {\r\n      console.log(error);\r\n      alert(\"Něco se pokazilo, ale můžete to zkusit znovu.\")\r\n    }) */\r\n    \r\n/*     const dispatch = useAppDispatch()\r\n    dispatch(addTask(response.data.todo)) */\r\n    //console.log(response)\r\n    //return response\r\n  }\r\n)\r\n\r\nexport const fetchAlterTodo = createAsyncThunk<\r\n  Todo, \r\n  Todo, \r\n    { \r\n      rejectValue: FetchTodosError \r\n    }\r\n  >('todos/fetchAlterTodo', async (todoUserParams, { rejectWithValue }) => {\r\n    try {\r\n      const { text, isCompleted, urgency, id }: Todo = todoUserParams\r\n      const response = await todosAPI.alterTodo(text, isCompleted, urgency, id!)\r\n      return response.data.todo     \r\n    } catch (err) {\r\n\r\n      }\r\n  }\r\n)\r\n\r\nconst todosSlice = createSlice({\r\n  name: 'todos',\r\n  initialState,\r\n  reducers: {\r\n/*     addTask: (state, action: PayloadAction<Todo>) => {\r\n      //state.push(action.payload)\r\n      console.log(action.payload)\r\n    },\r\n    updateTask(state, action) {\r\n      const todo = state.find(todo => todo.id === action.payload)\r\n      if (todo) {\r\n        todo.isCompleted = !todo.isCompleted\r\n      }\r\n    } */\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchNewTodo.fulfilled, (state, {payload}) => {\r\n      state.push(payload)\r\n      \r\n    })\r\n    builder.addCase(fetchAlterTodo.fulfilled, (state, {payload}) => {\r\n      state.find(todo => {\r\n        if (todo) {\r\n\r\n        }\r\n        const { text, urgency, isCompleted } = payload\r\n        Object.assign(todo, { text, urgency, isCompleted })\r\n        //console.log(current(todo)) \r\n        //console.log(todo.id) is equal console.log(payload.id) \r\n        //console.log(todo) some bullshit - proxy\r\n        //console.log(payload.id)\r\n      })\r\n      //console.log(payload)\r\n    })\r\n  } \r\n})\r\n\r\nexport default todosSlice.reducer\r\n//export const { addTask, updateTask } = todosSlice.actions\r\n\r\nexport {}","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\redux\\initSlice.ts",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"62","replacedBy":"66"},{"ruleId":"64","replacedBy":"67"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"68","severity":1,"message":"69","line":1,"column":41,"nodeType":"70","messageId":"71","endLine":1,"endColumn":48},{"ruleId":"72","severity":1,"message":"73","line":110,"column":23,"nodeType":"74","messageId":"75","endLine":110,"endColumn":25},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],["76"],["77"],"@typescript-eslint/no-unused-vars","'current' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.find() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]