[{"D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\reportWebVitals.ts":"1","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\App.tsx":"2","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\components\\TaskItem\\TaskItem.tsx":"3","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\components\\TaskForm\\TaskForm.tsx":"4","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\components\\CreatingModal\\CreatingModal.tsx":"5","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\components\\Board\\Board.tsx":"6","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\api\\api.tsx":"7","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\index.js":"8","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\redux\\store.ts":"9","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\hooks\\hooks.ts":"10","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\redux\\todosSlice.ts":"11","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\redux\\initSlice.ts":"12"},{"size":425,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":620,"mtime":1616309298420,"results":"15","hashOfConfig":"14"},{"size":3328,"mtime":1616797866508,"results":"16","hashOfConfig":"14"},{"size":719,"mtime":1613321879879,"results":"17","hashOfConfig":"14"},{"size":1806,"mtime":1616497348519,"results":"18","hashOfConfig":"14"},{"size":1372,"mtime":1616374211203,"results":"19","hashOfConfig":"14"},{"size":1766,"mtime":1616710433936,"results":"20","hashOfConfig":"14"},{"size":613,"mtime":1614522980457,"results":"21","hashOfConfig":"14"},{"size":365,"mtime":1616217348241,"results":"22","hashOfConfig":"14"},{"size":275,"mtime":1614527271544,"results":"23","hashOfConfig":"14"},{"size":3037,"mtime":1616625675709,"results":"24","hashOfConfig":"14"},{"size":1132,"mtime":1616302066234,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"narbcv",{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\reportWebVitals.ts",[],["55","56"],"D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\App.tsx",["57","58","59"],"import * as React from 'react'\nimport { useState, useEffect } from 'react'\nimport { Board } from './components/Board/Board'\nimport { useAppDispatch, useAppSelector } from './hooks/hooks'\nimport { getSessionId } from './redux/initSlice'\nimport './App.css'\n\n\nexport const App = (props: any) => {\n\n  let state = useAppSelector(state => state)\n  //const[sessionId, setId] = useState(state.sessionId)\n  \n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(getSessionId());\n    console.log(dispatch(getSessionId()))\n  }, [])\n  \n  return (\n    <div className=\"app\">\n      <Board {...props} />\n    </div>\n  )\n}","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\components\\TaskItem\\TaskItem.tsx",["60","61"],"D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\components\\TaskForm\\TaskForm.tsx",[],["62","63"],"D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\components\\CreatingModal\\CreatingModal.tsx",[],"D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\components\\Board\\Board.tsx",[],"D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\api\\api.tsx",[],"D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\index.js",[],["64","65"],"D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\redux\\store.ts",[],"D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\hooks\\hooks.ts",[],"D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\redux\\todosSlice.ts",["66"],"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport { todosAPI } from '../api/api'\r\n\r\n\r\nexport interface Todo {\r\n  id?: string\r\n  created?: string\r\n  updated?: string\r\n  text: string\r\n  isCompleted: boolean\r\n  urgency: number\r\n}\r\n\r\ninterface Response {\r\n  \"status\": number,\r\n  \"todo\": {\r\n    \"id\": string,\r\n    \"created\": string,\r\n    \"updated\": string,\r\n    \"text\": string,\r\n    \"isCompleted\": boolean,\r\n    \"urgency\": number\r\n  }\r\n}\r\n\r\ninterface FetchTodosError {\r\n  status: string\r\n  message: string;\r\n}\r\n\r\nlet initialState = [] as Array<Todo> \r\n\r\nexport const fetchNewTodo = createAsyncThunk<\r\n  Todo, \r\n  Todo, \r\n    { \r\n      rejectValue: FetchTodosError \r\n    }\r\n  >('todos/fetchNewTodo', async (todoUserParams, { rejectWithValue }) => {\r\n    try {\r\n      const { text, isCompleted, urgency }: Todo = todoUserParams\r\n      const response = await todosAPI.createTodo(text, isCompleted, urgency)\r\n      return response.data.todo     \r\n    } catch (err) {\r\n/*       let error: FetchTodosError = err // cast the error for access\r\n      if (error.status === \"ERROR\") {\r\n        throw err */\r\n      }\r\n\r\n\r\n/*     if (response.status !== 201) {\r\n      alert(\"Thunk: Něco se pokazilo, ale můžete to zkusit znovu.\" )\r\n      return thunkAPI.rejectWithValue({ \r\n        message: \"Thunk: Něco se pokazilo, ale můžete to zkusit znovu.\"       \r\n      })  \r\n    }  */\r\n/*     .then(function (response: any) {\r\n      console.log(response);\r\n    })\r\n    .catch(function (error: any) {\r\n      console.log(error);\r\n      alert(\"Něco se pokazilo, ale můžete to zkusit znovu.\")\r\n    }) */\r\n    \r\n/*     const dispatch = useAppDispatch()\r\n    dispatch(addTask(response.data.todo)) */\r\n    //console.log(response)\r\n    //return response\r\n  }\r\n)\r\n\r\nexport const fetchAlterTodo = createAsyncThunk<\r\n  Todo, \r\n  Todo, \r\n    { \r\n      rejectValue: FetchTodosError \r\n    }\r\n  >('todos/fetchAlterTodo', async (todoUserParams, { rejectWithValue }) => {\r\n    try {\r\n      const { text, isCompleted, urgency, id }: Todo = todoUserParams\r\n      const response = await todosAPI.alterTodo(text, isCompleted, urgency, id!)\r\n      return response.data.todo     \r\n    } catch (err) {\r\n\r\n      }\r\n  }\r\n)\r\n\r\nconst todosSlice = createSlice({\r\n  name: 'todos',\r\n  initialState,\r\n  reducers: {\r\n/*     addTask: (state, action: PayloadAction<Todo>) => {\r\n      //state.push(action.payload)\r\n      console.log(action.payload)\r\n    },\r\n    updateTask(state, action) {\r\n      const todo = state.find(todo => todo.id === action.payload)\r\n      if (todo) {\r\n        todo.isCompleted = !todo.isCompleted\r\n      }\r\n    } */\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchNewTodo.fulfilled, (state, {payload}) => {\r\n      state.push(payload)\r\n      console.log(payload)\r\n    })\r\n    builder.addCase(fetchAlterTodo.fulfilled, (state, {payload}) => {\r\n      //state.push(payload)\r\n      console.log(payload)\r\n    })\r\n  } \r\n})\r\n\r\nexport default todosSlice.reducer\r\n//export const { addTask, updateTask } = todosSlice.actions\r\n\r\nexport {}","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\redux\\initSlice.ts",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":2,"column":10,"nodeType":"73","messageId":"74","endLine":2,"endColumn":18},{"ruleId":"71","severity":1,"message":"75","line":11,"column":7,"nodeType":"73","messageId":"74","endLine":11,"endColumn":12},{"ruleId":"76","severity":1,"message":"77","line":19,"column":6,"nodeType":"78","endLine":19,"endColumn":8,"suggestions":"79"},{"ruleId":"71","severity":1,"message":"80","line":3,"column":26,"nodeType":"73","messageId":"74","endLine":3,"endColumn":40},{"ruleId":"71","severity":1,"message":"81","line":15,"column":11,"nodeType":"73","messageId":"74","endLine":15,"endColumn":17},{"ruleId":"67","replacedBy":"82"},{"ruleId":"69","replacedBy":"83"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"84","line":14,"column":11,"nodeType":"73","messageId":"74","endLine":14,"endColumn":19},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'state' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["87"],"'useAppSelector' is defined but never used.","'status' is assigned a value but never used.",["85"],["86"],"'Response' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},"Update the dependencies array to be: [dispatch]",{"range":"90","text":"91"},[533,535],"[dispatch]"]