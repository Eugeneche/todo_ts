[{"D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\index.tsx":"1","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\reportWebVitals.ts":"2","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\App.tsx":"3","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\components\\TaskItem\\TaskItem.tsx":"4","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\components\\TaskForm\\TaskForm.tsx":"5","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\components\\Board\\BoardContainer.tsx":"6","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\components\\Board\\Board.tsx":"7","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\redux\\redux-toolkit.ts":"8"},{"size":615,"mtime":1613322325333,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":248,"mtime":1613169349698,"results":"12","hashOfConfig":"10"},{"size":743,"mtime":1613256879978,"results":"13","hashOfConfig":"10"},{"size":719,"mtime":1613321879879,"results":"14","hashOfConfig":"10"},{"size":204,"mtime":1613168238712,"results":"15","hashOfConfig":"10"},{"size":508,"mtime":1613256933704,"results":"16","hashOfConfig":"10"},{"size":1767,"mtime":1613322010377,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"narbcv",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},"D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\index.tsx",[],"D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\reportWebVitals.ts",[],["40","41"],"D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\App.tsx",["42"],"import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport {Board} from './components/Board/Board'\nimport './App.css'\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\components\\TaskItem\\TaskItem.tsx",["43","44","45"],"import * as React from \"react\"\r\nimport * as ReactDOM from \"react-dom\"\r\nimport { useState } from \"react\"\r\nimport { TaskForm } from \"../TaskForm/TaskForm\"\r\nimport done from '../../img/done.svg'\r\nimport inProgress from '../../img/in_progress.svg'\r\n\r\n\r\ntype taskProps = {\r\n    text: string\r\n    isCompleted?: boolean\r\n    urgency: number\r\n  }\r\n\r\nexport const TaskItem = ({text, isCompleted, urgency}:taskProps) => {\r\n    const [mode, setMode] = useState(false)\r\n    return (\r\n        <div className=\"task-item\">\r\n            {mode === true ? <TaskForm /> :\r\n            <div className=\"task-item__status\"><img src={isCompleted ? done : inProgress}/></div>}\r\n            <div className=\"task-item__text\">{text}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\components\\TaskForm\\TaskForm.tsx",[],"D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\components\\Board\\BoardContainer.tsx",[],["46","47"],"D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\components\\Board\\Board.tsx",["48","49","50"],"import * as React from 'react'\r\nimport {useState} from 'react'\r\nimport * as ReactDOM from 'react-dom'\r\nimport { TaskItem } from '../TaskItem/TaskItem'\r\nimport '../../App.css'\r\nimport add from '../../img/add.svg'\r\n\r\nexport const Board = () => {\r\n  return (\r\n    <div className=\"board board__main\">\r\n      <img src={add} className=\"board__add-img\" />\r\n      <header className=\"App-header\">\r\n       <h1>Todo List</h1>\r\n      </header>\r\n      <TaskItem text={'Learn React'} urgency={1} />\r\n    </div>\r\n  );\r\n};\r\n","D:\\Work\\ROI Hunter\\todo_app\\todo_ts\\src\\redux\\redux-toolkit.ts",["51"],"import { createSlice, configureStore } from '@reduxjs/toolkit'\r\n\r\ntype todo = {\r\n    id: string | null\r\n    created: string | null\r\n    updated: string | null\r\n    text: string | null\r\n    isCompleted: boolean\r\n    urgency: number | null\r\n  }\r\n\r\nlet initialState: Array<todo> = [\r\n  {\r\n    id: '2',\r\n    created: '23',\r\n    updated: '24',\r\n    text: 'cheer',\r\n    isCompleted: false,\r\n    urgency: 1\r\n  }\r\n]\r\n\r\nlet nextTodoId = 0\r\n\r\nconst tasksSlice = createSlice({\r\n  name: 'todos',\r\n  initialState: initialState,\r\n  reducers: {\r\n    addTask: {\r\n      reducer(state, action) {\r\n        const { id, created, updated, text, isCompleted, urgency } = action.payload\r\n        state.push({ id, created, updated, text, isCompleted: false, urgency })\r\n      },\r\n      prepare(text): any {\r\n        return {payload: {text, id: nextTodoId++}}\r\n      }\r\n    },\r\n    updateTask(state, action) {\r\n      const todo = state.find(todo => todo.id === action.payload)\r\n      if (todo) {\r\n        todo.isCompleted = !todo.isCompleted\r\n      }\r\n    }\r\n  }\r\n})\r\n\r\n//export default tasksSlice.reducer\r\nexport const { addTask, updateTask } = tasksSlice.actions\r\n\r\nexport const store = configureStore({\r\n  reducer: tasksSlice.reducer,\r\n})\r\n\r\n/* export const taskReducer = (state:initialStateType = initialState, action: createNewTaskActionType):initialStateType => {\r\n    return initialState;\r\n}\r\n\r\ntype createNewTaskActionType = {\r\n    type: typeof CREATE_NEW_TASK\r\n    text: string\r\n    isCompleted: boolean\r\n    urgency: number\r\n}\r\n\r\nexport const createNewTask = (text: string, isCompleted: boolean, urgency: number):createNewTaskActionType => {\r\n    return {\r\n        type: CREATE_NEW_TASK,\r\n        text: text,\r\n        isCompleted: isCompleted,\r\n        urgency: urgency,\r\n    }\r\n} */",{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":2,"column":13,"nodeType":"58","messageId":"59","endLine":2,"endColumn":21},{"ruleId":"56","severity":1,"message":"57","line":2,"column":13,"nodeType":"58","messageId":"59","endLine":2,"endColumn":21},{"ruleId":"56","severity":1,"message":"60","line":16,"column":18,"nodeType":"58","messageId":"59","endLine":16,"endColumn":25},{"ruleId":"61","severity":1,"message":"62","line":20,"column":48,"nodeType":"63","endLine":20,"endColumn":92},{"ruleId":"52","replacedBy":"64"},{"ruleId":"54","replacedBy":"65"},{"ruleId":"56","severity":1,"message":"66","line":2,"column":9,"nodeType":"58","messageId":"59","endLine":2,"endColumn":17},{"ruleId":"56","severity":1,"message":"57","line":3,"column":13,"nodeType":"58","messageId":"59","endLine":3,"endColumn":21},{"ruleId":"61","severity":1,"message":"62","line":11,"column":7,"nodeType":"63","endLine":11,"endColumn":51},{"ruleId":"56","severity":1,"message":"67","line":31,"column":45,"nodeType":"58","messageId":"59","endLine":31,"endColumn":56},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"@typescript-eslint/no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'setMode' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["68"],["69"],"'useState' is defined but never used.","'isCompleted' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]